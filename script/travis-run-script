#!/usr/bin/ruby
# -*- coding: utf-8 -*-
# Copyright (C) 2014  Daniel Gröber <dxld ÄT darkboxed DOT org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'rubygems'
require 'bundler/setup'


require 'travis/support'
Travis.logger = Logger.new(StringIO.new)

require 'travis'
require 'travis/build'
require 'travis/model/build/config'
require 'travis/testing/factories'
require 'yaml'
require 'active_support/core_ext/hash'


# from travis-core/lib/travis/model/build/config/matrix.rb
def permutations(base, result = [])
  base = base.dup
  if base.empty?
    [result]
  else
    first = base.shift
    if first.respond_to? :map
      first.map { |value| permutations(base, result + [value]) }.flatten(1)
    else
      permutations(base, result + [first])
    end
  end
end

def configs(yml)
  begin
    payload = YAML.load(yml)
  rescue Exception => e
    $stderr.puts e.message
    $stderr.puts e.backtrace
    $stderr.puts yml
    exit 1
  end
  # Normalize build configuration
  config = payload.respond_to?(:to_hash) ? payload.to_hash : {}
  bcfg = Build::Config.new(config, :multi_os => false)
  normalized_cfg = bcfg.normalize

  matrix = Build::Config::Matrix.new(normalized_cfg, :multi_os => false)

  # Get final configuration for build matrix elements
  builds = matrix.expand

  # Get The varying keys in the build matrix for use as a human readable label
  # TODO: fix matrix.exclude
  mkeys = Build::Config.matrix_keys_for(config, :multi_os => false)

  mkeys.reject! { |k|
    !(    normalized_cfg.has_key?(k) \
      && !normalized_cfg[k].nil?     \
      && !normalized_cfg[k].empty?
     )
  }

  dims = mkeys.map do |key|
    normalized_cfg[key]
  end

  build_keys = permutations(dims)
  labels = build_keys.map do |bk|
    x = []
    mkeys.each_index do |imk|
      mk = mkeys[imk]

      x << "#{mk}: #{bk[imk]}"
    end

    x.join ", "
  end

  str = ""
  builds.each_index do |i|
    c = YAML.dump(builds[i]).gsub("\n", '\n')
    str += "label='" + labels[i] + "'; "
    str += "cfg='" + c.gsub("'", '\'\\\\\'\'') + "'\n"
  end

  str
end

def script(config)
  build = {
    :build => {
      :id => 42,
      :number => 43
    },
    :repository => {
      :slug => ""
    },
    :job => {
      :branch => "master"
    },
    :config => YAML.load(config.gsub("\\n", "\n"))
  }

  Travis::Build.script(build).compile
end

# I feel dirty writing this but I don't want the resulting script to do a
# checkout as we copy the directory into the vm ourselfs
s = Travis::Build::Script::STAGES[:builtin]
s.delete_at(s.index(:checkout))

if ARGV.length == 0 then
  puts configs($stdin.read)
elsif ARGV.length == 1 && ARGV[0] == "--build" then
  puts script($stdin.read)
elsif ARGV.length == 1 && ARGV[0] == "--test" then
  if $stdin.read().length == 0 then
    exit 1
  end
  exit 0
else

  puts "Usage: travis-run-script [--build]"
  exit 1
end
