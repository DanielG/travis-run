#!/bin/sh

backend_register_longopt "vagrant-docker-from:"

vagrant_check_state_dir () {
    if [ ! -d .travis-run/$VM_NAME ]; then
	echo "travis-run: Can't find vagrant state dir: ">&2
	echo "\t$PWD/.travis-run/$VM_NAME">&2
	echo >&2
	echo "Have you run \`travis-run create' yet?">&2
	exit 1
    fi
}

vagrant_create () {
    set -e

    local OPTS VM_NAME OPT_DISTRIBUTION OPT_FROM

    OPTS=$(getopt -o "" --long vagrant-docker-from: -n "$(basename $0)" -- "$@")
    eval set -- "$OPTS"

    while true; do
	case "$1" in
            --vagrant-docker-from)  OPT_FROM=$1;     shift; shift ;;

            --) shift; break ;;
            *) echo "Error parsing argument: $1">&2; exit 1 ;;
	esac
    done

    VM_NAME=$1; shift
    OPT_FROM=${OPT_FROM:-ubuntu:precise}; shift

    (
	mkdir -p ~/.travis-run/$VM_NAME
	cp $(dirname $0)/prepare-vm.sh ~/.travis-run/$VM_NAME/

	cat > ~/.travis-run/$VM_NAME/Dockerfile <<EOF
# AUTOMATICALLY GENERATED BY travis-run WILL BE OVERWRITTEN UNCONDITIONALLY!
## To modify the environment for your builds modify the Dockerfile in
## .travis-run/$VM_NAME in your project directory instead.  This Dockerfile is
## primarily used to build the base image so Vagrant doesn't try to rebuild the
## Docker image all the time.
FROM $OPT_FROM

CMD /usr/sbin/sshd -D

WORKDIR /root
ADD prepare-vm.sh /root/prepare-vm.sh

RUN sh -x /root/prepare-vm.sh vagrant

RUN apt-get update; apt-get install -y openssh-server sudo
RUN adduser vagrant --disabled-password --gecos ""; adduser vagrant sudo
RUN echo 'Defaults    !authenticate' >  /etc/sudoers.d/noauth; chmod 0440 /etc/sudoers.d/noauth
RUN echo "root:vagrant" | chpasswd; echo "vagrant:vagrant" | chpasswd
RUN mkdir /home/vagrant/.ssh; echo 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key' > /home/vagrant/.ssh/authorized_keys; chown -R vagrant:vagrant /home/vagrant/.ssh/; chmod 640 /home/vagrant/.ssh/authorized_keys

RUN mkdir /var/run/sshd
EOF

	docker build -t $VM_NAME ~/.travis-run/$VM_NAME

	mkdir -p .travis-run/$VM_NAME

	if [ ! -e .travis-run/$VM_NAME/Dockerfile ]; then
	    cat > .travis-run/$VM_NAME/Dockerfile <<EOF
# GENERATED BY travis-run EDIT AT WILL
## Remove this file and re-run travis-run-create to return to defaults
FROM $VM_NAME
CMD /usr/sbin/sshd -D
EOF
	fi

	if [ ! -e Vagrantfile ]; then
	    cat > .travis-run/$VM_NAME/Vagrantfile <<EOF
# GENERATED BY travis-run EDIT AT WILL
## Remove this file and re-run travis-run-create to return to defaults
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.synced_folder "../../", "/home/vagrant/build"
  config.vm.provider "docker" do |d|
    d.build_dir = "."
    d.cmd = ["/usr/sbin/sshd", "-D"]
    d.has_ssh = true
  end
end
EOF
	fi
    )
}

vagrant_init () {
    local VM_NAME
    VM_NAME=$1; shift

    vagrant_check_state_dir $VM_NAME

    (
	cd .travis-run/$VM_NAME
	vagrant up --provider=docker
    )
}

vagrant_end () {
    local VM_NAME
    VM_NAME=$1; shift

    vagrant_check_state_dir $VM_NAME

    (
	cd .travis-run/$VM_NAME
	vagrant destroy --force
    )
}

## Usage: vagrant_run VM_NAME COPY? [OPTIONS..] -- COMMAND
vagrant_run () {
    set -e

    local OPTS VM_NAME CPY DIR

    OPTS=$(getopt -o "" -n "$(basename $0)" -- "$@")
    eval set -- "$OPTS"

    while true; do
	case "$1" in
            --) shift; break ;;
            *) echo "Error parsing argument: $1">&2; exit 1 ;;
	esac
    done

    VM_NAME=$1; shift
    CPY=$1; shift

    vagrant_check_state_dir $VM_NAME

    local dir=$PWD

    # We can ignore most arguments because vagrant already handles that stuff.
    (
	cd .travis-run/$VM_NAME

	if [ x"$CPY" = x"copy" ]; then
	    vagrant ssh -- mkdir -p build/
	    tar -C $dir -c . | vagrant ssh -- tar -C build -x
	    echo
	fi

	vagrant ssh -- "$@"
    )
}
