#!/bin/sh
# Copyright (C) 2014  Daniel Gröber <dxld ÄT darkboxed DOT org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## Run .travis.yml build inside a schroot over ssh

. $(dirname $0)/common.sh

usage () {
    echo "Usage: $0 [OPTIONS..] [BACKEND_OPTIONS..] [COMMAND [ARGS..]]"
    echo "Global Options (OPTIONS):"

    echo "\t-b, --backend=BACKEND"
    echo "\t\tVirtualization backend to use. Currently avalialbe backends:"
    echo "\t\t  $(echo $BACKENDS | sed 's/ /, /g')"
    echo "\t\t(defaults to: vagrant)"

    echo "\t-k, --keep"
    echo "\t\tDo not stop and destroy VM after build finishes. This is useful"
    echo "\t\tduring development as you will only have to go through"
    echo "\t\tVM creation once. Make sure to \`travis-run clean' or"
    echo "\t\t\`travis-run stop' after you're done with the VM."

    echo "\t-n, --vm-name=VM_NAME"
    echo "\t\tArbitrary identifier associated with the build VM. (defaults"
    echo "\t\tto: travis-run-vm). The backend may support persistent options"
    echo "\t\tper VM referenced by name, see backend documentation for "
    echo "\t\tdetails."
    echo
    echo

    echo "Global Backend Options (BACKEND_OPTIONS):"
    echo "\tNone so far, see Commands for command specific backend options."
    echo
    echo

    echo "Commands (COMMAND):"
    echo "\trun (default if no command given)"
    echo "\t\tRun the build matrix in sequence and abort on the first failure"
    echo "\t\tdropping into a shell for diagnostics by default. Note that by"
    echo "\t\tdefault the project directory is also synchronized with the VM"
    echo "\t\trunning the build before and after the build so make sure your"
    echo "\t\t.travis.yml contains a \`clean' action before attempting the"
    echo "\t\tbuild."
    echo "\t\tBackend Options for \`schroot':"
    echo "\t\t\t--schrot-user=USER"
    echo "\t\t\t\tName of the user to run commands inside the"
    echo "\t\t\t\tchroot as, see -u option of the \`schroot'"
    echo "\t\t\t\tcommand."
    echo
    echo

    echo "\tstop"
    echo "\t\tStop running build VM. This will tear down the VM as well as"
    echo "\t\tall it's disk state."
    echo
    echo

    echo "\tcreate"
    echo "\t\tSetup build VM. Depending on the backend it might be stored"
    echo "\t\tglobally or in \`.travis-run' in the current directory."
    echo "\t\tBackend Options for \`schroot':"
    echo "\t\t\t--schrot-user=USER"
    echo "\t\t\t\tName of the user outside the schroot that will"
    echo "\t\t\t\trun \`travis-run'. This is needed for file"
    echo "\t\t\t\tsync to work. (required)"
    echo "\t\tBackend Options for \`vagrant':"
    echo "\t\t\t--vagrant-docker-from=BASE_IMAGE"
    echo "\t\t\t\tDocker image to use as the base for the"
    echo "\t\t\t\tcontainer, see \`FROM' Dockerfile command."
    echo "\t\t\t\t(defaults to: ubuntu:presice)"
    echo "TODO: docker-build-stage"
    echo
    echo

    echo "\tclean"
    echo "\t\tStop running build VM, and clean any backend specific state "
    echo "\t\tkept in the project directory."
    echo
}

TRAVIS_GETOPT_LONG="help,keep,vm-name,backend:"
TRAVIS_GETOPT_SHORT="hkn:b:"

if [ "$BACKEND_GETOPT_LONG" ]; then
    LONGOPTS="$TRAVIS_GETOPT_LONG,$BACKEND_GETOPT_LONG"
else
    LONGOPTS="$TRAVIS_GETOPT_LONG"
fi

OPTS=$($GETOPT \
    -o "$TRAVIS_GETOPT_SHORT" \
    --long "$LONGOPTS" \
    -n "$(basename $0)" -- "$@")
eval set -- "$OPTS"

BACKEND_ARGS=""

while true; do
    case "$1" in
	-h|--help)    usage; exit; ;;
        -k|--keep)    OPT_KEEP=1; shift ;;
        -n|--vm-name) OPT_VM_NAME=$2; shift; shift ;;
        -b|--backend) OPT_BACKEND=$2; shift; shift ;;

	--schroot-*|--vagrant-*|--docker-*)
	    if [ ! "$BACKEND_ARGS" ]; then
		BACKEND_ARGS="$1=$2";
	    else
		BACKEND_ARGS="${BACKEND_ARGS} $1 $2";
	    fi
	    shift; shift
	    ;;

        --) shift; break ;;
        *) echo "Error parsing argument: $1">&2; exit 1 ;;
    esac
done

## Global Options

# OPT_KEEP unset by default
OPT_VM_NAME=${OPT_VM_NAME:-travis-run-amd64}
OPT_BACKEND=${OPT_BACKEND:-docker}

## Commands

if [ "$1" ]; then
    COMMAND=$1; shift
else
    COMMAND="run"
fi

case "$COMMAND" in
    run)    ( . $(dirname $0)/travis-run-run.sh    );;
    stop)   ( backend_end $OPT_VM_NAME             );;
    create) ( . $(dirname $0)/travis-run-create.sh );;
    clean)  ( . $(dirname $0)/travis-run-clean.sh  );;
    *)
	echo "Error: unknown command \"$COMMAND\"">&2
	echo "See \`$0 --help' for a list of valid commands"
	exit 1
esac
