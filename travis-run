#!/bin/sh
# Copyright (C) 2014  Daniel Gröber <dxld ÄT darkboxed DOT org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## Run .travis.yml build inside a schroot over ssh

export SHARE_DIR="$(dirname "$0")"

. "$SHARE_DIR/common.sh"

usage () {
    printf "Usage: %s [OPTIONS..] [BACKEND_OPTIONS..] [COMMAND [ARGS..]]\n" "$0"
    printf "\
*Global Options*\n\
	-b, --backend=BACKEND\n\
		Virtualization backend to use. Currently available backends\n\
		(defaults to: docker):\n\
\n\
%s\n\
\n\
	-k, --keep\n\
		Don't stop and destroy VM after build finishes. This is useful\n\
		during development as you will only have to go through\n\
		VM creation once. Make sure to \`travis-run clean' or\n\
		\`travis-run stop' after you're done with the VM.\n\
\n\
	-n, --vm-name=VM_NAME\n\
		Backend specific identifier associated with the VM. For the\n\
		docker backend this is the repository name for the images to\n\
		use. (defaults to \`dxld/travis-run' for docker backend)
\n\
\n\
" "$(echo -n "$BACKENDS" | awk -v RS=" " '{ if($0) print "\t\t- " $0 }')"

    printf "\
*Commands*\n\
\n\
run [BUILD_ID | BUILD_CONFIG]:\n\
	(default if no command given)\n\
	Run the build matrix in sequence and abort on the first failure or run\n\
	the given BUILD_ID (see the \`matrix' command). On failure you will be\n\
	dropped into a shell inside the build environment so you can figure \n\
	out what's going on.\n\
\n\
\n\
stop:\n\
	Stop running build VM. This will tear down the VM as well as all it's\n\
	disk state.\n\
\n\
\n\
create:\n\
	Setup build VM. Depending on the backend it might be stored globally\n\
	or in \`.travis-run' in the current directory.\n\
\n\
		--docker-base-image=BASE_IMAGE\n\
			Docker image to use as the base for the container, see\n\
			\`FROM' Dockerfile command.  (defaults to:\n\
			ubuntu:presice)\n\
		--docker-build-stage=STAGE\n\
			Stage of the image build to run, (one of: base,\n\
			script, language, project)\n\
		--docker-no-pull\n\
			Build all docker containers from scratch, don't try to\n\
			pull them from the docker hub.
\n\
\n\
clean:
	Stop running build VM, and clean any backend specific state kept in\n\
	the project directory.\n\
\n\
\n\
matrix:
	Print the build matrix. The number in the first column is the\n\
	BUILD_ID. The part after the ':' is the BUILD_CONFIG, note that this\n\
	is whitespace sensitive.
"


#		Backend Options for \`schroot':"
#			--schrot-user=USER"
#				Name of the user to run commands inside the"
#				chroot as, see -u option of the \`schroot'"
#				command."
#		Backend Options for \`schroot':"
#			--schrot-user=USER"
#				Name of the user outside the schroot that will"
#				run \`travis-run'. This is needed for file"
#				sync to work. (required)"
}

TRAVIS_GETOPT_LONG="help,keep,vm-name,backend:"
TRAVIS_GETOPT_SHORT="hkn:b:"

if [ "$BACKEND_GETOPT_LONG" ]; then
    LONGOPTS="$TRAVIS_GETOPT_LONG,$BACKEND_GETOPT_LONG"
else
    LONGOPTS="$TRAVIS_GETOPT_LONG"
fi

OPTS=$($GETOPT \
    -o "$TRAVIS_GETOPT_SHORT" \
    --long "$LONGOPTS" \
    -n "$(basename "$0")" -- "$@")
eval set -- "$OPTS"

BACKEND_ARGS=""

while true; do
    case "$1" in
	-h|--help)    usage; exit; ;;
        -k|--keep)    OPT_KEEP=1; shift ;;
        -n|--vm-name) OPT_VM_NAME=$2; shift; shift ;;
        -b|--backend) OPT_BACKEND=$2; shift; shift ;;

	--schroot-*|--vagrant-*|--docker-*)
	    if [ ! "$BACKEND_ARGS" ]; then
		BACKEND_ARGS="$1=$2";
	    else
		BACKEND_ARGS="${BACKEND_ARGS} $1 $2";
	    fi
	    shift; shift
	    ;;

        --) shift; break ;;
        *) echo "Error parsing argument: $1">&2; exit 1 ;;
    esac
done

## Global Options

OPT_KEEP=$OPT_KEEP # OPT_KEEP unset by default
OPT_BACKEND=${OPT_BACKEND:-docker}

case "$OPT_BACKEND" in
    docker) OPT_VM_NAME=${OPT_VM_NAME:-dxld/travis-run} ;;
esac

## Commands

if [ "$1" ]; then
    COMMAND=$1; shift
else
    COMMAND="run"
fi

case "$COMMAND" in
    run)     ( . "$SHARE_DIR"/travis-run-run.sh    );;
    stop)    ( backend_end "$OPT_VM_NAME"          );;
    create)  ( . "$SHARE_DIR"/travis-run-create.sh );;
    clean)   ( backend_clean "$OPT_VM_NAME"        );;
    destroy) ( backend_destroy "$OPT_VM_NAME"      );;
    matrix)  ( . "$SHARE_DIR"/travis-run-matrix.sh );;
    *)
	echo "Error: unknown command \"$COMMAND\"">&2
	echo "See \`$0 --help' for a list of valid commands"
	exit 1
esac
