#!/bin/sh
# Copyright (C) 2014  Daniel Gröber <dxld ÄT darkboxed DOT org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

## Run .travis.yml build inside a schroot over ssh

export SHARE_DIR="$(dirname "$0")"

. "$SHARE_DIR/common.sh"

usage () {
    printf "Usage: %s [OPTIONS..] [BACKEND_OPTIONS..] [COMMAND [ARGS..]]" "$0"
    printf "\
Global Options (OPTIONS):\n\
	-b, --backend=BACKEND\n\
		Virtualization backend to use. Currently available backends:\n\
		    %s\n\
		(defaults to: docker)\n\
\n\
	-k, --keep\n\
		Don't stop and destroy VM after build finishes. This is useful\n\
		during development as you will only have to go through\n\
		VM creation once. Make sure to \`travis-run clean' or\n\
		\`travis-run stop' after you're done with the VM.\n\
\n\
	-n, --vm-name=VM_NAME\n\
		Arbitrary identifier associated with the build VM. (defaults\n\
		to: travis-run-vm). The backend may support persistent options\n\
		per VM referenced by name, see backend documentation for\n\
		details.\n\
\n\
\n\
" "$(echo "$BACKENDS" | sed 's/ /, /g')"

    printf "\
Global Backend Options (BACKEND_OPTIONS):\n\
	None so far, see Commands for command specific backend options.\n\
\n\
\n\
Commands (COMMAND):\n\
	run (default if no command given)\n\
		Run the build matrix in sequence and abort on the first\n\
		failure dropping into a shell for diagnostics by default. Note\n\
		that by default the project directory is also synchronized\n\
		with the VM running the build before and after the build so\n\
		make sure your .travis.yml contains a \`clean' action before\n\
		attempting the build.\n\
\n\
\n\
	stop\n\
		Stop running build VM. This will tear down the VM as well as\n\
		all it's disk state.\n\
\n\
\n\
	create\n\
		Setup build VM. Depending on the backend it might be stored\n\
		globally or in \`.travis-run' in the current directory.\n\
		Backend Options for \`docker':\n\
			--docker-base-image=BASE_IMAGE\n\
				Docker image to use as the base for the\n\
				container, see \`FROM' Dockerfile command.\n\
				(defaults to: ubuntu:presice)\n\
			--docker-build-stage=STAGE\n\
				Stage of the image build to run, (one of:\n\
				  base, script, language, project)\n\
\n\
\n\
	clean
		Stop running build VM, and clean any backend specific state\n\
		kept in the project directory.\n\
\n\
"


#		Backend Options for \`schroot':"
#			--schrot-user=USER"
#				Name of the user to run commands inside the"
#				chroot as, see -u option of the \`schroot'"
#				command."
#		Backend Options for \`schroot':"
#			--schrot-user=USER"
#				Name of the user outside the schroot that will"
#				run \`travis-run'. This is needed for file"
#				sync to work. (required)"
}

TRAVIS_GETOPT_LONG="help,keep,vm-name,backend:"
TRAVIS_GETOPT_SHORT="hkn:b:"

if [ "$BACKEND_GETOPT_LONG" ]; then
    LONGOPTS="$TRAVIS_GETOPT_LONG,$BACKEND_GETOPT_LONG"
else
    LONGOPTS="$TRAVIS_GETOPT_LONG"
fi

OPTS=$($GETOPT \
    -o "$TRAVIS_GETOPT_SHORT" \
    --long "$LONGOPTS" \
    -n "$(basename "$0")" -- "$@")
eval set -- "$OPTS"

BACKEND_ARGS=""

while true; do
    case "$1" in
	-h|--help)    usage; exit; ;;
        -k|--keep)    OPT_KEEP=1; shift ;;
        -n|--vm-name) OPT_VM_NAME=$2; shift; shift ;;
        -b|--backend) OPT_BACKEND=$2; shift; shift ;;

	--schroot-*|--vagrant-*|--docker-*)
	    if [ ! "$BACKEND_ARGS" ]; then
		BACKEND_ARGS="$1=$2";
	    else
		BACKEND_ARGS="${BACKEND_ARGS} $1 $2";
	    fi
	    shift; shift
	    ;;

        --) shift; break ;;
        *) echo "Error parsing argument: $1">&2; exit 1 ;;
    esac
done

## Global Options

OPT_KEEP=$OPT_KEEP # OPT_KEEP unset by default
OPT_VM_NAME=${OPT_VM_NAME:-travis-run-amd64}
OPT_BACKEND=${OPT_BACKEND:-docker}

## Commands

if [ "$1" ]; then
    COMMAND=$1; shift
else
    COMMAND="run"
fi

case "$COMMAND" in
    run)    ( . "$SHARE_DIR"/travis-run-run.sh    );;
    stop)   ( backend_end "$OPT_VM_NAME"          );;
    create) ( . "$SHARE_DIR"/travis-run-create.sh );;
    clean)  ( . "$SHARE_DIR"/travis-run-clean.sh  );;
    *)
	echo "Error: unknown command \"$COMMAND\"">&2
	echo "See \`$0 --help' for a list of valid commands"
	exit 1
esac
